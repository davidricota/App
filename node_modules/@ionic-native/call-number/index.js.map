{"version":3,"sources":["../../../src/@ionic-native/plugins/call-number/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;;;;GAoBG;AASH;IAAgC,8BAAiB;IAAjD;;IA8BA,CAAC;IA7BC;;;;;OAKG;IAIH,+BAAU,GAAV,UAAW,YAAoB,EAAE,gBAAyB;QACxD,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAIH,oCAAe,GAAf;QACE,MAAM,CAAC;IACT,CAAC;IACI,qBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,yBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAnBA;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;gDAGD;IASD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;qDAGD;IAvBU,UAAU;QARtB,MAAM,CAAC;YACN,UAAU,EAAE,YAAY;YACxB,MAAM,EAAE,aAAa;YACrB,SAAS,EAAE,oBAAoB;YAC/B,IAAI,EAAE,qDAAqD;YAC3D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,UAAU,CA8BtB;IAAD,iBAAC;CA9BD,AA8BC,CA9B+B,iBAAiB,GA8BhD;SA9BY,UAAU","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @name Call Number\n * @description\n * Call a number directly from your Cordova/Ionic application.\n * **NOTE**: The iOS Simulator (and maybe Android Simulators) do not provide access to the phone subsystem.\n *\n * @usage\n * ```typescript\n * import { CallNumber } from '@ionic-native/call-number';\n *\n * constructor(private callNumber: CallNumber) { }\n *\n * ...\n *\n *\n * this.callNumber.callNumber(\"18001010101\", true)\n *   .then(res => console.log('Launched dialer!', res))\n *   .catch(err => console.log('Error launching dialer', err));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'CallNumber',\n  plugin: 'call-number',\n  pluginRef: 'plugins.CallNumber',\n  repo: 'https://github.com/Rohfosho/CordovaCallNumberPlugin',\n  platforms: ['Android', 'iOS']\n})\n\nexport class CallNumber extends IonicNativePlugin {\n  /**\n   * Calls a phone number\n   * @param {string} numberToCall The phone number to call as a string\n   * @param {boolean} bypassAppChooser Set to true to bypass the app chooser and go directly to dialer\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  callNumber(numberToCall: string, bypassAppChooser: boolean): Promise<any> {\n    return;\n  }\n\n  /**\n   * Check if call feature is available\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  isCallSupported(): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}